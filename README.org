#+TITLE: Strong Normalization of the Simply-Typed Lambda Calculus in Lean by Decomposition Into the SK Combinators
#+AUTHOR: Dowland Aiello
#+DATE: 5/26/25
#+BIBLIOGRAPHY: bibliography.bib
#+LATEX_HEADER: \usepackage{mathpartir}
#+LATEX_HEADER: \usepackage{amsthm}
#+LATEX_HEADER: \usepackage{hyperref}

* Abstract

Proofs of strong normalization of the simply-typed lambda calculus have been exhaustively enumerated in the literature. A common strategy invented by W. W. Tait known as "Tait's method," [cite:@harper2022] interprets types as sets of "well-behaving" terms which are known to be strongly normalizing and composed of expressions in some such set.
Strong normalization of the typed SK combinator calculus has been comparatively under-studied. Herein, I demonstrate that the typical proof of strong normalization using Tait's method holds for the typed SK combinator calculus. I also show that decomposition of the STLC into the SK combinator calculus simplifies the typical proof of strong normalization.

* A Type Discipline for the SK Combinators

I consider the usual SK combinator calculus defined as such:

#+BEGIN_EXPORT latex
\begin{align}
& K xy = x \\
& S xyz = xz (yz)
\end{align}
#+END_EXPORT

A natural interpretation of the combinators as typed functions results in the dependent typing:

#+BEGIN_EXPORT latex
\[
\inferrule
  { \Gamma \vdash A : K \ \Gamma,x : A \vdash B : L }
  { \Gamma \vdash (\forall x : A.B) : L}
\]
\[
\inferrule
  { }
  { \Gamma T_{n} : T_{n + 1} }
\]
\[
\inferrule
  { \Gamma \alpha : T_{n}, \beta : T_{m}, x : \alpha, y : \beta }
  { \Gamma \vdash K : (\forall x, y.\alpha) }
\]
\[
\inferrule
  { \Gamma \alpha : T_{n}, \beta : T_{m}, \gamma : T_{o}, x : (\forall x : \alpha, y : \beta.\gamma), y : (\forall x : \alpha.\alpha), z : \alpha }
  { \Gamma \vdash S : (\forall x, y, z.\gamma) }
\]
#+END_EXPORT

#+NAME: decomplemma:1
\label{decomplemma:1}
* Decomposition of the Simply-Typed Lambda Calculus into Dependently Typed SK Combinators

I utilize an SK compilation scheme outlined in "The Implementation of Functional Programming Languages" [cite:@10.5555/1096899]:

#+BEGIN_EXPORT latex
\begin{align}
(\lambda x.e_{1}\ e_{2})\ arg &= S (\lambda x.e_{1}) (\lambda x.e_{2})\ arg \\
(\lambda x.x) &= SKK \\
(\lambda x.c) &= K c
\end{align}
#+END_EXPORT

I consider a generic simply-typed lambda calculus with base types $B$, a type constructor \rightarrow and the type universe:

#+BEGIN_EXPORT latex
\[
T = \{ t \mid t \in B\}\ \cup\ \{ t \mid \exists\  t_{1} \in T, t_{2} \in T, t = t_{1} \rightarrow t_{2} \}
\]
#+END_EXPORT

** Type Expressivity & Equivalence

I define a mapping (M_{t}) from the \rightarrow type constructor to \forall: $(\alpha \rightarrow \beta) \mapsto \forall x : \alpha.\beta$. I also assume the existence of a mapping (M_{c}) from the base types $B$ to arbitrary objects in my dependently-typed SK combinator calculus. Type inference is trivially derived from the above inference rules: $\forall c \in B, \exists\ t, t', c : t \implies t' = M_{t} t \implies M_{c} : t$.

It follows that every well-typed expression in our simply-typed lambda calculus has an equivalent well-typed SK expression:

#+BEGIN_EXPORT latex
\begin{proof}
Assume (1) that for all $c \in B, \exists!\ c' \in M_{c}, c' = M_{c} c$.
Assume (2) that for all $\{t_{1}, t_{2}, t\} \subset T, t = (t_{1} \rightarrow t_{2}), \exists!\ t' \in M_{t}, t' = M_{t} t$.
Per \href{decomplemma:1}{above} and induction on (1) there exists a mapping from every lambda expression to an SK combinator expression.
It follows by induction on $e : t$, where $e$ is well-typed per the \href{decomplemma:1}{inference rules} that all $t \in$ the simply-typed $T$ are in $M_{t}$.
It suffices to conclude that all well-typed expressions have well-typed counterparts in the dependently-typed SK combinator calculus.
\end{proof}
#+END_EXPORT

* Proof
** Strong Normalization of the Typed SK Combinators
** Strong Normalization of the STLC
** Encoding in Lean

#+PRINT_BIBLIOGRAPHY:
